{"version":3,"sources":["util.coffee"],"names":[],"mappings":"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","file":"util.js","sourceRoot":"/source/","sourcesContent":["###\r\n  一个小扩展，用于获取元素相对于当前浏览器窗口区域的位置\r\n  返回对象包括 top, left, bottom, right 四个属性\r\n  top    元素上边缘和窗口上边缘的距离（如果上边缘在窗口区域外则为负值）\r\n  left   元素左边缘和窗口左边缘的距离（如果左边缘在窗口区域外则为负值）\r\n  bottom 元素下边缘和窗口下边缘的距离（如果下边缘在窗口区域外则为负值）\r\n  right  元素右边缘和窗口右边缘的距离（如果右边缘在窗口区域外则为负值）\r\n  计算元素上下左右边缘时不包括 margin 值\r\n  \r\n  -> http://stackoverflow.com/questions/3714628/jquery-get-the-location-of-an-element-relative-to-window\r\n###\r\njQuery.fn.offset_of_window = ->\r\n  offset = this.offset()\r\n  off_top    = offset.top\r\n  off_left   = offset.left\r\n  off_bottom = off_top + this.height()\r\n  off_right  = off_left + this.width()\r\n  jqw = jQuery(window)\r\n  window_scroll_left = jqw.scrollLeft()\r\n  window_scroll_top = jqw.scrollTop()\r\n  {\r\n    left: off_left - window_scroll_left\r\n    top: off_top  - window_scroll_top\r\n    bottom: jqw.height() + window_scroll_top - off_bottom\r\n    left: jqw.width() + window_scroll_left - off_right\r\n  }\r\n\r\n\r\n###\r\n  一个小扩展，用于计算指定的元素是否在当前浏览器窗口之内\r\n  只要有任何一部分在窗口之内，就返回 true\r\n  如果完全在窗口之外，则返回 false\r\n  此方法一般用于实现图片 lazy load 等特性\r\n###\r\njQuery.fn.is_in_screen = ->\r\n  oow = this.offset_of_window()\r\n  jqw = jQuery(window)\r\n  return false if oow.top > jqw.height()\r\n  return false if oow.bottom > jqw.height()\r\n  return false if oow.left > jqw.width()\r\n  return false if oow.right > jqw.width()\r\n  return true\r\n\r\n\r\nwindow.Util = \r\n  ###\r\n    网格计算辅助方法\r\n    根据传入的总长度，grid 个数（默认1），grid 之间的间隔（默认0），返回一个对象\r\n    该对象包含以下属性：\r\n      side_length:\r\n        每个网格的长度\r\n      positions:\r\n        数组，长度为 grid 个数，包含的数据是每个 grid 的起始坐标位置\r\n  ###\r\n  spacing_grid_data: (length, grid_count = 1, spacing = 0)->\r\n    side_length = (length - spacing * (grid_count - 1)) / grid_count\r\n    {\r\n      side_length: side_length\r\n      positions: for i in [0 ... grid_count]\r\n        i * (side_length + spacing)\r\n    }\r\n\r\n  ###\r\n    一个小扩展，初始化一个数组，并使用指定的方法返回的结果填充\r\n    传入两个参数，第一个参数是数组长度，第二个参数是指定的方法\r\n    两个参数都可以省略，如果省略时，默认使用 null 填充\r\n    之所以不是简单地传入指定的对象来填充，是为了避免对象的引用重复，例如：\r\n    传入 {height: $height} 这样的对象时，会造成对 $height 的重复引用\r\n  ###\r\n  array_init: (length = 0, func = -> null)->\r\n    (func(i) for i in [0 ... length])\r\n\r\n  ###\r\n    一个小扩展，用于计算数组中最大/最小的数值\r\n    传入数组作为参数，返回最大/最小的数值\r\n  ###\r\n  array_max: (array)->\r\n    Math.max.apply null, array\r\n  array_min: (array)->\r\n    Math.min.apply null, array"]}